generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(PARTICIPANT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  avatarUrl     String?
  bio           String?
  phone         String?
  events        Event[]        @relation("EventOrganizer")
  feedbacks     Feedback[]
  notifications Notification[]
  registrations Registration[]
}

model Event {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  date          DateTime
  location      String
  capacity      Int?
  status        EventStatus    @default(DRAFT)
  organizerId   Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizer     User           @relation("EventOrganizer", fields: [organizerId], references: [id])
  feedbacks     Feedback[]
  registrations Registration[]
}

model Registration {
  id        Int                @id @default(autoincrement())
  userId    Int
  eventId   Int
  status    RegistrationStatus @default(PENDING)
  createdAt DateTime           @default(now())
  event     Event              @relation(fields: [eventId], references: [id])
  user      User               @relation(fields: [userId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  ORGANIZER
  PARTICIPANT
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELED
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELED
}
